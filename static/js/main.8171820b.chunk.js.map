{"version":3,"sources":["components/Header.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","bg","variant","Brand","Toggle","Collapse","className","Text","App","useState","value","setValue","localStorage","getItem","JSON","parse","list","setList","useEffect","setItem","stringify","Container","onSubmit","e","preventDefault","prev","id","length","handelSubmit","InputGroup","FormControl","placeholder","onChange","target","Prepend","Button","type","size","ListGroup","map","item","Item","key","onClick","newList","filter","handelRemove","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8171820b.chunk.js","sourcesContent":["import React from 'react'\nimport { Offline, Online } from 'react-detect-offline'\nimport { Navbar } from 'react-bootstrap'\n\nconst Header = () => {\n  return (\n    <Navbar bg='primary' variant='dark'>\n      <Navbar.Brand>\n        کارام\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse className='justify-content-end'>\n        <Navbar.Text>\n          <Offline>آفلاین</Offline>\n          <Online>آنلاین</Online>\n        </Navbar.Text>\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n\nexport default Header;\n","import React, { useState, useEffect } from 'react'\nimport Header from './components/Header'\nimport { InputGroup, Button, FormControl, Container, ListGroup } from 'react-bootstrap'\n\nconst App = () => {\n  const [ value, setValue ] = useState('')\n  const [ list, setList ] = useState (\n    localStorage.getItem('list') ?\n    JSON.parse(localStorage.getItem('list')): []\n  )\n  const handelSubmit = e => {\n    e.preventDefault()\n    setList(prev => [...prev, { id: list.length, value }])\n    setValue('')\n  }\n  const handelRemove = id => {\n    const newList = list.filter(item => item.id !== id)\n    setList(newList)\n  }\n\n  useEffect(() => {\n    localStorage.setItem('list', JSON.stringify(list))\n  }, [ list ])\n\n  return (\n    <>\n      <Header />\n      <Container className='mt-4'>\n        \n        <form onSubmit={e => handelSubmit(e)}>\n          <InputGroup>\n            <FormControl\n              placeholder='کار من...'\n              value={value}\n              onChange={e => setValue(e.target.value)}\n            />\n            <InputGroup.Prepend>\n              <Button\n                type='submit'\n                variant='success'\n                size='sm'\n              >افزودن</Button>\n            </InputGroup.Prepend>\n          </InputGroup>\n        </form>\n\n        <ListGroup className='text-right mt-4'>\n          {\n            list.length ?\n              list.map(item =>\n                <ListGroup.Item\n                  key={item.id}\n                  className='d-flex justify-content-between align-items-center'>\n                  { item.value }\n                  <Button \n                    variant='danger' \n                    size='sm'\n                    onClick={() => handelRemove(item.id)}\n                  > حذف </Button>\n                </ListGroup.Item>\n              )\n            :\n            <div className='text-center text-success'>\n              هوراا همه‌ی کارای لعنتیت رو انجام دادی!\n            </div>\n          }\n        </ListGroup>\n      </Container>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './app.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}